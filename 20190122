@BeforeEach
    public void before() {
        mockLoginComponent.mockLogin();
        levelTestsUploadPath = mockServiceComponent.createMockFileRepository(fileRepositoryService)
            .getPath();
    }

    @Test
    @Transactional
    public void testParse() throws Exception {
        readFile();
        parse();
        insert();

        
    }


    public void readFile() throws Exception {
//        unzip file
        String uploadPath = FileUtil.getTempDir();
        File levelTestFile = ResourceUtils.getFile("classpath:test/test_lt101.zip");
        Assertions.assertTrue(levelTestFile.exists());

        ZipUtil.unzip(levelTestFile.toString(), uploadPath);

        String excelFilePath = Paths.get(uploadPath, "/lt101.xlsx").toString();
        levelTestExcelParser.readExcelFile(levelTestsUploadPath, excelFilePath);
    }

    public void parse() throws Exception {
        levelTestExcelParser.parse();
        for (LevelTestSet levelTestSet : levelTestExcelParser.getLevelTestsMap().values()) {
            levelTestExcelParser.copyResourceFiles(levelTestSet);
        }
    }

    public void insert() {
        Collection levelTests = levelTestExcelParser.getLevelTestsMap().values();
        Iterator iterator = levelTests.iterator();
        while (iterator.hasNext()) {
            LevelTestSet levelTestSet = (LevelTestSet) iterator.next();

            final LevelTestSet levelTestSetByLevelNSetNo = levelTestSetService
                .selectLevelTestSetByLevelNSetNo(levelTestSet.getLevelNo(),
                    levelTestSet.getSetNo());

            if (levelTestSetByLevelNSetNo == null) {
                levelTestSetService.insertLevelTestSet(levelTestSet);
                levelTestSetService.insertLevelTestQuestsionList(levelTestSet);
            } else {
                levelTestQuestionService.deleteQuestion(levelTestSetByLevelNSetNo.getId());
                levelTestSetService.updateLevelTestSet(levelTestSetByLevelNSetNo);
                levelTestSet.setId(levelTestSetByLevelNSetNo.getId());
                levelTestSetService.insertLevelTestQuestsionList(levelTestSet);
            }
        }

    }
